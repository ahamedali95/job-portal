{"version":3,"file":"js/main.24c6b255e4d74f3b795d.bundle.js","mappings":"2LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCdN,MAQMC,EAAkB,CACtB,CAAEC,KAAM,IAAKC,WATMC,EAAAA,EAAAA,OAAK,IAAM,4DAU9B,CAAEF,KAAM,YAAaC,WATFC,EAAAA,EAAAA,OAAK,IAAM,qCAYnBC,EAAmB,IAC9B,gBAAC,KAAD,KACE,gBAAC,KAAD,KAEIJ,EAAOK,KAAI,CAACC,EAAcC,IAEtB,gBAAC,KAAD,CACEC,IAAKF,EAAML,KAAOM,EAClBE,OAAK,EACLR,KAAMK,EAAML,MAEZ,gBAAC,EAAAS,SAAD,CAAUC,SAAU,iDAClB,gBAACL,EAAMJ,UAAP,YC1BHU,EAAgB,IAAM,gBAACR,EAAD,MCKnC,MAgBA,GAAeS,E,WAAAA,GAhBa,CAC1BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,YAGVE,MAAO,CACLC,cAAe,CACbC,eAAe,MCDrBC,EAAAA,OACE,gBAACC,EAAA,EAAD,CAAeC,MAAOA,GACpB,gBAAC,EAAAC,EAAD,CAAyBC,MAAOC,EAAAA,GAC9B,gBAACd,EAAD,QAGJe,SAASC,eAAe,SJ8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","sources":["webpack://webpack-config/./src/service-worker.ts","webpack://webpack-config/./src/Router.tsx","webpack://webpack-config/./src/pages/App/index.tsx","webpack://webpack-config/./src/layout/theme.ts","webpack://webpack-config/./src/index.tsx"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {ComponentType, lazy, LazyExoticComponent, Suspense} from 'react';\nimport { BrowserRouter, Route as BrowserRoute, Switch } from 'react-router-dom';\n\n// React framework level optimization using lazy-loading. Refer to my blog here: https://ahamedblogs.wordpress.com/2020/04/24/react-framework-level-optimization-using-lazy-loading-and-suspense/\nconst CalendarPage = lazy(() => import(/* webpackChunkName: \"Calendar\" */ './pages/Calendar'));\nconst SettingsPage = lazy(() => import(/* webpackChunkName: \"Settings\" */ './pages/Settings'));\n\ntype Route = {\n    path: string;\n    Component: LazyExoticComponent<ComponentType<any>>;\n};\n\nconst routes: Route[] = [\n  { path: '/', Component: CalendarPage },\n  { path: '/settings', Component: SettingsPage }\n];\n\nexport const Router: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      {\n        routes.map((route: Route, index: number): JSX.Element => {\n          return (\n            <BrowserRoute\n              key={route.path + index}\n              exact\n              path={route.path}\n            >\n              <Suspense fallback={<div>component loading</div>}>\n                <route.Component />\n              </Suspense>\n            </BrowserRoute>\n          );\n        })\n      }\n    </Switch>\n  </BrowserRouter>\n);\n","import React from 'react';\nimport { Router } from '../../Router';\n\nexport const App: React.FC = () => <Router />;\n","// Added Redux doc inspired color schemes\n// We can still add more configurations to our theme.\n// Possibilities: dark theme color schemes, responsive typography, provide overrides for our\n// components that controls the appearance i.e., button ripple effect can be turned off throughout\n// the application. In real-world applications, our configurations will\n// dictated by the UX specs from the design team.\nimport {createTheme, ThemeOptions} from '@material-ui/core/styles';\n\nconst theme: ThemeOptions = {\n  palette: {\n    primary: {\n      main: '#6d1cac'\n    },\n    secondary: {\n      main: '#7431ca'\n    }\n  },\n  props: {\n    MuiButtonBase: {\n      disableRipple: true\n    }\n  },\n};\n\nexport default createTheme(theme);","import './wdyr';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport * as serviceWorker from './service-worker';\nimport { App } from './pages/App';\nimport theme from './layout/theme';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <App />\n    </MuiPickersUtilsProvider>\n  </ThemeProvider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"names":["Boolean","window","location","hostname","match","routes","path","Component","lazy","Router","map","route","index","key","exact","Suspense","fallback","App","createTheme","palette","primary","main","secondary","props","MuiButtonBase","disableRipple","ReactDOM","ThemeProvider","theme","M","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"sourceRoot":""}